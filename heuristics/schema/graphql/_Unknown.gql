type AbyssBossLifeScalingPerLevel {
  _: i32
  _: i32
}

type ActiveSettings {
  _: string
  _: i32
  _: i32
  _: rid
  _: rid
  _: rid
  _: rid
  _: i32 # All rows empty
}

type AlternateTreeArt {
  _: rid
  _: string
  _: string
  _: string
}

type AnimateWeaponUniques {
  _: string
  _: rid
  _: rid
  _: i32
}

type AtlasMemoryLine {
  _: string
  _: string
  _: string
  _: string
  _: string
  _: string
}

type BattlePasses {
  _: string
  _: i32
  _: string
  _: string
  _: i32
  _: i32
  _: i32 # All rows empty
  _: bool
}

type BattlePassRewards {
  _: rid
  _: i32
  _: i32
  _: i32
  _: i32
  _: i32 # All rows empty
  _: i32
  _: rid
  _: i32
  _: i32 # All rows empty
  _: i32
  _: i32 # All rows empty
  _: i32
  _: i32
  _: i32
  _: i32 # All rows empty
  _: i32
  _: i32
  _: i32
  _: rid
  _: i32 # All rows empty
  _: i32
  _: i32
  _: i32
  _: i32
  _: i32
  _: bool
  _: bool
}

type BattlePassTracks {
  _: string
  _: string
}

type BreachArtVariations {
  _: string
  _: rid
  _: rid
  _: rid
  _: rid
  _: rid
  _: rid
  _: rid
  _: [_]
  _: rid
}

type Breachstones {
  _: rid
  _: i32
  _: i32
  _: rid
  _: rid
}

type conditionalachievements {
  _: rid
  _: i32
  _: i32
}

type CorpseSinkVariations {
  _: string
  _: string
  _: string
  _: [string]
  _: i32
  _: i32
  _: i32
  _: bool
  _: bool
}

type CosmeticsEquipPanelMode {
  _: string
  _: [_]
}

type CraftingBenchSpecificOptionId {
  _: string
  _: string
  _: i32 # All rows empty
  _: i32 # All rows empty
}

type CrucibleDifficulty {
  _: string
  _: string
  _: i32
  _: i32
  _: i32
  _: i32
}

type CrucibleEndgameMonsterPacks {
  _: string
  _: [_]
  _: i32
  _: i32
  _: bool
}

type CrucibleLifeScalingPerLevel {
  _: i32
  _: i32
}

type CruciblePlayerClassOffsets {
  _: rid
  _: i32
  _: i32
}

type CrucibleTags {
  _: string
  _: bool
}

type CurrencyUseEffects {
  _: rid
  _: i32 # All rows empty
  _: string
  _: string
  _: i32
  _: i32 # All rows empty
  _: bool
  _: bool
  _: rid
  _: f32
}

type DamageEffectVariations {
  _: string
  _: [string]
  _: [string]
  _: i32
  _: i32
  _: [string]
  _: [string]
  _: rid
}

type DamageWhenHitEffects {
  _: rid
  _: rid
  _: bool
}

type DelveRobotVariations {
  _: string
  _: string
  _: [string]
  _: rid
  _: rid
}

type divinationwindowvisuals {
  _: string
  _: string
  _: string
}

type entityinfobarstyle {
  _: string
  _: string
  _: string
  _: string
  _: string
  _: string
  _: string
  _: string
  _: string
  _: string
  _: string
  _: i32
  _: i32
  _: string
  _: string
  _: string
  _: string
  _: string
}

type FlaskStashBaseTypeOrdering {
  _: rid
  _: i32
}

type GameObjectTasksFromStats {
  _: rid
  _: rid
  _: i32
  _: bool
  _: bool
  _: bool
}

type GamepadButtonCombination {
  _: string
  _: rid
  _: rid
  _: i32
}

type GamepadThumbstick {
  _: string
  _: string
}

type GoldActScaling {
  _: string
  _: i32
  _: i32
  _: i32
}

type GoldConstants {
  _: string
  _: i32
}

type HardModeExtraContentChances {
  _: string
  _: i32
  _: i32
  _: i32
  _: i32
  _: [_]
  _: bool
}

type hardmodeextracontentchancespermaptier {
  _: rid
  _: i32 # All rows empty
}

type HarvestCraftCostScalingByBasetype {
  _: rid
  _: rid
  _: i32
}

type HideoutCraftingBenchDoodads {
  _: rid
  _: rid
}

type HideoutCraftingBenchInterfaceVisuals {
  _: string
  _: string
  _: string
  _: string
  _: string
  _: string
}

type HideoutStashDoodads {
  _: rid
  _: bool
  _: bool
  _: bool
}

type HideoutWaypointDoodads {
  _: rid
  _: [_]
}

type HudEnergyShieldVisuals {
  _: string
  _: string
  _: string
  _: string
  _: string
  _: string
  _: string
  _: string
  _: string
  _: bool
}

type HudLifeVisuals {
  _: string
  _: string
  _: string
  _: [_]
  _: string
  _: string
  _: string
  _: string
  _: string
  _: string
  _: string
  _: i32
}

type HudVisualsFromStat {
  _: rid
  _: rid
  _: rid
  _: rid
}

type itemclasspickupeffect {
  _: rid
  _: rid
  _: rid
  _: i32 # All rows empty
}

type itemclassvisualreplacement {
  _: rid
  _: rid
  _: rid
  _: i32
}

type itempickupeffect {
  _: rid
  _: rid
  _: rid
  _: i32 # All rows empty
}

type ItemVisualReplacement {
  _: rid
  _: rid
  _: rid
  _: i32
}

type LegacyAtlasInfluenceOutcomes {
  _: string
  _: i32
  _: i32
  _: i32
  _: i32
  _: rid
  _: [_]
}

type mapstashsubstashgroup {
  _: string
  _: string
  _: string
  _: rid
  _: string
}

type MemoryLineType {
  _: string
  _: rid
  _: i32
  _: [_]
  _: [_]
  _: i32
  _: i32
  _: rid
  _: i32 # All rows empty
  _: string
  _: rid
}

type MicrotransactionAppliedInventoryItemArtVariations {
  _: rid
  _: [string]
  _: [_]
  _: [_]
  _: [_] # All rows empty
}

type MicrotransactionChargeVariations {
  _: rid
  _: rid
  _: rid
  _: rid
}

type MicrotransactionConditionalApparitionEvents {
  _: rid
  _: i32 # All rows empty
  _: i32
  _: rid
  _: i32
  _: i32
  _: i32
  _: rid
  _: i32
  _: i32
  _: i32
  _: i32
  _: i32
  _: bool
}

type MicrotransactionConditionalApparitions {
  _: string
  _: [_]
  _: [_]
  _: string
  _: i32 # All rows empty
  _: i32 # All rows empty
  _: rid
  _: i32
  _: i32
  _: bool
  _: bool
}

type MicrotransactionEquippedIconVariations {
  _: rid
  _: [string]
  _: [_]
}

type MicrotransactionJewelVariations {
  _: rid
  _: i32
  _: string
  _: string
  _: i32
  _: [_]
  _: string
  _: string
  _: i32 # All rows empty
  _: i32
  _: string
  _: i32
  _: string
  _: i32
  _: rid
  _: bool
  _: bool
}

type MicrotransactionObjectEffects {
  _: string
  _: [_]
  _: string
  _: [_]
  _: [string]
  _: rid
  _: [_]
  _: i32
  _: i32
  _: i32
  _: i32
  _: i32 # All rows empty
  _: i32
  _: i32
  _: i32
  _: i32
}

type MicrotransactionOnKillBeams {
  _: string
  _: rid
  _: string
  _: string
  _: string
  _: rid
  _: bool
}

type MicrotransactionOnKillConditions {
  _: string
  _: [_]
  _: [_] # All rows empty
  _: [_] # All rows empty
  _: i32
  _: i32
  _: rid
  _: i32 # All rows empty
  _: i32 # All rows empty
  _: i32
  _: i32 # All rows empty
  _: bool
  _: bool
}

type MicrotransactionOnKillEffects {
  _: string
  _: rid
  _: rid
  _: rid
  _: i32
  _: rid
  _: i32
}

type miniontype {
  _: string
  _: rid
  _: rid
  _: i32
  _: i32
  _: i32
}

type PassiveJewelArt {
  _: rid
  _: string
  _: string
  _: rid
}

type PortalAudio {
  _: rid
  _: rid
  _: rid
  _: i32
}

type PortalAudioEvents {
  _: string
  _: i32
}

type PreloadFromStats {
  _: rid
  _: [_]
  _: [_] # All rows empty
  _: [_]
  _: [_]
  _: i32
}

type RelicInventoryLayout {
  _: i32
  _: i32
  _: i32
  _: string
}

type RelicItemEffectVariations {
  _: string
  _: string
  _: string
}

type ShrineVisualArtVariations {
  _: rid
  _: rid
  _: i32 # All rows empty
}

type SkillGemLevelUpEffects {
  _: string
  _: rid
  _: rid
  _: rid
  _: rid
}

type StampChoice {
  _: string
  _: rid
  _: i32
  _: string
  _: string
  _: rid
  _: [_]
  _: i32
}

type StampFamily {
  _: string
  _: i32
}

type StatsFromSkillStats {
  _: rid
  _: rid
}

type StatVisuals {
  _: rid
  _: [string]
  _: bool
}

type TieredMicrotransactions {
  _: rid
  _: [_]
  _: rid
  _: [_]
  _: rid
  _: i32
  _: [_]
  _: [_]
  _: [_]
  _: bool
  _: bool
  _: rid
}

type tieredmicrotransactionsvisuals {
  _: rid
  _: i32
  _: string
  _: string
  _: i32
}

type tormentedspiritlifescalingperlevel {
  _: i32
  _: i32
}

type TradeMarketImplicitModDisplay {
  _: rid
  _: string
}

type TryTheNewLeagueVersions {
  _: string
  _: string
}

enum ancestraltrialmonsterranks @indexing(first: 0) { _ }

enum ancestraltrialopiniontypes @indexing(first: 0) { _ }

enum ancestraltrialshopslots @indexing(first: 0) { _ }

enum ancestraltrialunittypes @indexing(first: 0) { _ }

enum AtlasEntities @indexing(first: 0) { _ }

enum BattlePassRewardTypes @indexing(first: 0) { _ }

enum CustomLeagueTemplate @indexing(first: 0) { _ }

enum DamageHitTypes @indexing(first: 0) { _ }

enum DropReplacementCustomReplacements @indexing(first: 0) { _ }

enum DropReplacementCustomTargets @indexing(first: 0) { _ }

enum duplicategrantedeffect @indexing(first: 0) { _ }

enum mapdevicecustomeffects @indexing(first: 0) { _ }

enum MicrotransactionConditionalApparitionEventType @indexing(first: 0) { _ }

enum MicrotransactionConditionalApparitionOrientation @indexing(first: 0) { _ }

enum MicrotransactionConditionalApparitionPosition @indexing(first: 0) { _ }

enum MonsterPushTypes @indexing(first: 0) { _ }

enum NPCShopSellPriceType @indexing(first: 0) { _ }

enum OnHitEffectTarget @indexing(first: 0) { _ }

enum PantheonMapBossSelection @indexing(first: 0) { _ }

enum passiveskilltattootargets @indexing(first: 0) { _ }

enum passivetattoovendorgroups @indexing(first: 0) { _ }

enum ProjectileCollisionTypes @indexing(first: 0) { _ }

enum RarityMask @indexing(first: 0) { _ }

enum SanctumEffectTriggers @indexing(first: 0) { _ }

enum SanctumImmediateEffectType @indexing(first: 0) { _ }

enum SanctumPersistentEffectFamily @indexing(first: 0) { _ }

enum SkillWeaponEffects @indexing(first: 0) { _ }

enum UserInterfaceModeCondition @indexing(first: 0) { _ }
